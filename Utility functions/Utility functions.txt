#####################################################################################################
#
#
#         This function is used to return number of records having Y indicator from excel
#
#
#####################################################################################################

   def Num_0f_rows_Excel():
      A=pd.read_excel('D:/End to End/Excel_func/Excel.xlsx',dtype=str) 
      datatemp=pd.DataFrame(A)
      data=datatemp[(datatemp['Run_Indicator']=='Y')]
      return data.shape[0]

#####################################################################################################
#
#
#      This function is used to fetch specific column values from excel file having Y indicator
#
#
#####################################################################################################

   def Num_of_record():
      A=pd.read_excel('D:/End to End/Excel_func/Excel.xlsx',dtype=str) 
      datatemp=pd.DataFrame(A)
      data=datatemp[(datatemp['Run_Indicator']=='Y')]
      data2=data.fillna('')
      data1=data2.reset_index()
      Scenario,F_Name,L_Name,Email,Comment = ([] for i in range(5))
      for i in range (len(data1)):
         Scenario.append(data1['Scenario'][i])
         F_Name.append(data1['First_Name'][i])
         L_Name.append(data1['Last_Name'][i])
         Email.append(data1['Email'][i])
         Comment.append(data1['Comment'][i])
         mydict={"SCENARIO":Scenario,"F_NAME":F_Name,"L_NAME":L_Name,"EMAIL":Email,"COMMENT":Comment}
      return mydict

#####################################################################################################
#
#
#                      This function is used to update excel file PASS/FAIL
#
#
#####################################################################################################

   def updateExcelfile(Result,Scenariotemp):
      A=pd.read_excel('D:/End to End/Excel_func/Excel.xlsx',dtype=str) 
      datatemp=pd.DataFrame(A)
      data=datatemp[(datatemp['Scenario']==Scenariotemp) & (datatemp['Run_Indicator']=='Y')]
      A['Result'][data.index]=Result
      A.to_excel('D:/End to End/Excel_func/Excel.xlsx',index=False)

#####################################################################################################
#
#
#        This function is used to fetch all column values from excel file having Y indicator
#
#
#####################################################################################################

   def return_record():
      dict = {}
      Ex_cel=pd.read_excel('D:/End to End/Excel_func/Excel.xlsx',dtype=str) 
      datatemp=pd.DataFrame(Ex_cel)
      data=datatemp[(datatemp['Run_Indicator']=='Y')]
      final_dataframe=data.fillna('')                    #final_dataframe=fill_na.reset_index()
      for column in final_dataframe.columns:
         dict[column] = final_dataframe[column].tolist()
      return dict

#####################################################################################################
#
#
#         This function is used to fetch specific column values from DB having Y indicator
#
#
#####################################################################################################

   def Db_Connection():
        mysqldbconnection=dbconnection()
        connection_string=mysqldbconnection.dbconnect_string('conn_string')
        conn=db.connect(**connection_string)
        cursor=conn.cursor()
        query_ip=f"SELECT * FROM py_automate where Run_Indicator='Y';"
        cursor.execute(query_ip)
        res = cursor.fetchall()
        record = pd.DataFrame(res)
        Scenario,F_Name,L_Name,Email,Comment = ([] for i in range(5))
        for i in range (len(record)):
            Scenario.append(record[0][i])
            F_Name.append(record[2][i])
            L_Name.append(record[3][i])
            Email.append(record[4][i])
            Comment.append(record[5][i])
        mydict={"SCENARIO":Scenario,"F_NAME":F_Name,"L_NAME":L_Name,"EMAIL":Email,"COMMENT":Comment}
        cursor.close()
        conn.close()
        return mydict

#####################################################################################################
#
#
#                    This function is used to UPDATE DB result PASS/FAIL
#
#
#####################################################################################################

def DB_Update(value,data):
        mysqldbconnection=dbconnection()
        connection_string=mysqldbconnection.dbconnect_string('conn_string')
        conn=db.connect(**connection_string)
        cursor=conn.cursor()
        cursor.execute("UPDATE py_automate SET Result='"+value+"' WHERE Scenario='"+data+"' and Run_Indicator='Y';")  
        conn.commit()
        cursor.close()
        conn.close()

#####################################################################################################
#
#
#           This function is used to fetch all column values from DB having Y indicator
#
#
#####################################################################################################

def alter():
        mysqldbconnection=dbconnection()
        connection_string=mysqldbconnection.dbconnect_string('conn_string')
        conn=db.connect(**connection_string)
        cursor=conn.cursor()
        query_ip=f"SELECT * FROM py_automate where Run_Indicator='Y';"
        cursor.execute(query_ip)
        column_names = [description[0] for description in cursor.description]
        column_dict = {}
        for column in column_names:
            connection_string=mysqldbconnection.dbconnect_string('conn_string')
            conn=db.connect(**connection_string)
            cursor=conn.cursor()
            cursor.execute("SELECT {} FROM py_automate where Run_Indicator='Y';".format(column))
            column_values = [row[0] for row in cursor.fetchall()]
            column_dict[column] = column_values        #unique_values = set(column_values)       this is to fetch testcase..
                                                       #column_dict[column] = unique_values
        cursor.close()
        conn.close()
        return column_dict


